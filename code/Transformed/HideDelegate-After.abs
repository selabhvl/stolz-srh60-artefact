module HideDelegate;
import * from DeadlockChecking;

interface ClientI {
  Unit enquire(Rel w4, Bool rem);
}

interface PersonI {
  DeptI getDept(Rel w4);
  PersonI getManager(Rel w4);
}

interface DeptI {
  PersonI getManager(Rel w4);
  Unit setManager(Rel w4, PersonI m);
}

class Person(CogId id, CogMap cogs, DeptI d) implements PersonI {
  {  cogs.add(this,id); } 

  DeptI getDept(Rel w4) {
    return d;
  }
  
  PersonI getManager(Rel w4) {
    DeptI temp = this.getDept(w4);
        
    CogId tempCogId = cogs.lookup(temp);
    w4 = add(w4,Pair(id,tempCogId));
    Bool cf = cyclefree(w4);
    assert cf;
          
    return temp.getManager(w4);
  }
}

class Dept(CogId id, CogMap cogs) implements DeptI {
  PersonI m;
  {  cogs.add(this,id); } 
  
  PersonI getManager(Rel w4) {
    return this.m;
  }
  Unit setManager(Rel w4, PersonI p) {
    this.m = p;
  }
}

class Client(CogId id, CogMap cogs) implements ClientI {
  {  cogs.add(this,id); } 
  
  Unit enquire(Rel w4, Bool remote) {
    DeptI d;

    if ( remote ) {
      CogId fresh0 = cogs.fresh();
      d = new Dept(fresh0, cogs);
    } else {
      d = new local Dept(id, cogs);
    }
    
    CogId fresh1 = cogs.fresh();
    PersonI m = new Person(fresh1, cogs, d);
    
    CogId fresh2 = cogs.fresh();
    PersonI p = new Person(fresh2, cogs, d);


    CogId dCogId = cogs.lookup(d);
    w4 = add(w4,Pair(id,dCogId));
    Bool cf = cyclefree(w4);
    assert cf;

    d.setManager(w4,m);
    w4 = rem(w4,Pair(id,dCogId));

    CogId pCogId = cogs.lookup(p);
    w4 = add(w4,Pair(id,pCogId));
    cf = cyclefree(w4);
    assert cf;
    
    m = p.getManager(w4);
    w4 = rem(w4,Pair(id,pCogId));
  }
}

{
  CogMap cogs = new CogMapper();
  CogId id = cogs.fresh();
  Rel w4 = set[];

  CogId fresh = cogs.fresh();
  ClientI c = new Client(fresh, cogs);

  CogId cCogId = cogs.lookup(c);
  w4 = add(w4,Pair(id,cCogId));
  Bool cf = cyclefree(w4);
  assert cf;

  c.enquire(set[],False);
  w4 = rem(w4,Pair(id,cCogId));
}
